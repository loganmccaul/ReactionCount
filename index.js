/** Summary generated by Claude 🤷
 * Slack Reaction Count - Frontend JavaScript
 * 
 * This script handles the frontend functionality for displaying Slack reaction:
 * - Exchanges OAuth code for reaction data via API
 * - Renders interactive bar chart visualization of emoji reactions
 * - Manages loading states and transitions during data fetching
 * - Provides copy-to-clipboard functionality for sharing results
 * - Handles error states and user feedback
 */



/** INIT */
// Generate bars based on reaction data
const renderBars = (data) => {
  const maxWidth = parseInt(data[0].count / 100 + 5) * 100;
  let normalizeWidth = 256 / maxWidth;

  const bars = document.querySelector(".bars");
  let newBars = "";

  data.forEach((reaction, i) => {
    newBars = `${newBars} <div class="bar" data-name=${reaction.emoji} data-count=${reaction.count.toLocaleString()} style="width: ${reaction.count * normalizeWidth}px"><div class="reaction">${reaction.emojiUrl ? `<img src=${reaction.emojiUrl} />` : reaction.emoji}</div></div>`;
  });

  bars.innerHTML = newBars;

  const scale = document.querySelector(".scale");
  scale.innerHTML = `
    <span>0</span>
    <span>${(maxWidth * 0.25).toLocaleString()}</span>
    <span>${(maxWidth * 0.5).toLocaleString()}</span>
    <span>${(maxWidth * 0.75).toLocaleString()}</span>
    <span>${maxWidth.toLocaleString()}</span>
  `;
};

// Load placeholder chart
const example = [
  { emoji: "🥹", count: 7162 },
  { emoji: "🎉", count: 6847 },
  { emoji: "😃", count: 5923 },
  { emoji: "😎", count: 4756 },
  { emoji: "🤬", count: 4123 },
  { emoji: "😬", count: 3698 },
  { emoji: "🙌", count: 3245 },
  { emoji: "😭", count: 2891 },
  { emoji: "😂", count: 2567 },
  { emoji: "🤩", count: 2134 },
  { emoji: "❌", count: 1876 },
  { emoji: "✅", count: 1543 },
  { emoji: "✨", count: 1287 },
  { emoji: "😵‍💫", count: 945 },
  { emoji: "🦑", count: 734 },
  { emoji: "☕️", count: 562 },
  { emoji: "🙋‍♀️", count: 423 },
  { emoji: "🤪", count: 298 },
  { emoji: "👎", count: 187 },
  { emoji: "👩‍🚀", count: 45 },
  { emoji: "💯", count: 29 },
  { emoji: "🏝️", count: 15 },
  { emoji: "❤️", count: 3 },
];
renderBars(example);



/** UTILITIES */
// Show or hide with transition
const transitionRemove = (el) => {
  el.classList.remove("remove");
  setTimeout(() => el.classList.remove("hide"), 0);
};
const transitionAdd = (el) => {
  el.classList.add("hide");
  setTimeout(() => el.remove(), 300);
};

// Iterate through loading
const getRandomDuration = () => 2000 + Math.random() * 8000;
let overrideTimeout;
const iterateLoading = (duration) => {
  overrideTimeout = setTimeout(() => {
    // Break interval on last message
    const count = document.querySelectorAll("#loading span.hide").length;
    if (count === 1) {
      return;
    }

    // Show success
    document.querySelector("#loading span.hide").classList.remove("hide");

    // Show next message
    transitionRemove(document.querySelector("#loading p.remove"));

    // Trigger next loading iteration
    return iterateLoading(getRandomDuration());
  }, duration);
};



/** API REQUEST */
const url = new URLSearchParams(window.location.search);
const exchange = url.get("code");
if (exchange) {
  // Remove code from url
  window.history.replaceState({}, "", window.location.origin);

  // Trigger loading state
  document.getElementById("slackButton").remove(); // Hide sign into Slack button
  const loadingSection = document.getElementById("loading");
  transitionRemove(loadingSection);
  iterateLoading(getRandomDuration());

  // Fetch reactions
  fetch(`/api/reaction-count/${exchange}`)
    .then((response) => {

      if (!response.ok) {
        throw new Error(
          `Server responded with ${response.status}: ${response.statusText}`
        );
      }

      response.json().then((data) => {
        // Finish in progress loading
        clearTimeout(overrideTimeout);
        document
          .querySelectorAll("#loading span")
          .forEach((span, i) =>
            setTimeout(() => transitionRemove(span), i * 100)
          );
        document
          .querySelectorAll("#loading p")
          .forEach((p, i) => setTimeout(() => transitionRemove(p), i * 100));

        // Hide loading section
        setTimeout(() => {
          transitionAdd(loadingSection);
        }, 2500);

        // Replace placeholder barchart with real data
        renderBars(data);

        // Show placeholder
        setTimeout(() => {
          document.getElementById("barchart").classList.remove("opaque");
          document.getElementById("share").disabled = false;
        }, 3000);
      });
    })
    .catch((error) => {
      console.error("Error fetching reaction data:", error);

      // Stop loading
      clearTimeout(overrideTimeout);

      // Show error to user
      loadingSection.innerHTML = `<p class="error">There was an error fetching your Slack reactions. <p class="small">${error}</p></p>`;
    });
}



/** COPY FUNCTIONALITY */
const copy = (bars) => {
  // Table Header
  let text = `reaction         count       rank`;

  // Utility functions
  const addSpace = (text, length) =>
    Array.from({ length: length - text.length }, () => " ").join("");
  const handleTextEmojis = (emoji) => (emoji.length > 2 ? `:${emoji}:` : emoji);

  // Add row for each bar
  bars.forEach((bar, i) => {
    let index = "0";
    document.querySelectorAll(".bar").forEach((barCheck, i) => {
      if (barCheck === bar) {
        index = `${i + 1}`;
      }
    });

    const count = bar.dataset.count.toLocaleString();
    const emoji = bar.dataset.name;

    text = `${text}
${handleTextEmojis(emoji) + addSpace(emoji, 14)}${addSpace(count, 7) + count + addSpace(count, 8)}${addSpace(index, 5) + index}`;
  });

  // Add footer link
  text = `${text}
https://reaction-count.vercel.app`;

  return navigator.clipboard.writeText(text);
};

const showTooltip = (el) => {
  // Show copied tooltip
  const tooltip = document.createElement("span");
  tooltip.classList.add("tooltip");
  tooltip.textContent = "Copied to clipboard";
  el.appendChild(tooltip);
  setTimeout(() => {
    transitionAdd(tooltip);
  }, 2000);
};

// Event handlers for copy to share
document.body.addEventListener("click", (e) => {
  // Individual bar
  if (e.target && e.target.classList.contains("bar")) {
    copy([e.target]).then(() => showTooltip(e.target));
    return;
  }

  // Share top 10 link
  if (e.target && e.target.classList.contains("share")) {
    copy([...document.querySelectorAll(".bar")].slice(0, 10)).then(() =>
      showTooltip(e.target)
    );
    return;
  }
});
